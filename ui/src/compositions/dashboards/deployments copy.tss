import { reactive, toRefs, Ref } from 'vue'
import { useI18n } from 'vue-i18n'
import { useHead } from '@vueuse/head'
import { StatsLatest, BarData, dataset } from '@/apis/interfaces'
import axiosService from '@/apis/axiosService'
import moment from 'moment'

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export default function (
  url: Ref<{
    [x: string]: any
  }>,
) {
  const state = reactive({
    meta: {
      title: '',
      description: '',
    },
    loading: {
      loading: {
        active: true,
      },
    },
    alert: {
      class: '',
      message: '',
    },
    statsLatest: [] as StatsLatest,
    classes: {
      aLinks: 'hover:text-green-600 hover:font-extrabold',
    },
    responseStatus: 0 as number,
    testData: {
      labels: ['Paris', 'Nîmes', 'Toulon', 'Perpignan', 'Autre'],
      datasets: [
        {
          data: [30, 40, 60, 70, 5],
          backgroundColor: [
            '#77CEFF',
            '#0079AF',
            '#123E6B',
            '#97B0C4',
            '#A5C8ED',
          ],
        },
      ],
    },
    testDataa: {
      labels: ['Paris', 'Nîmes', 'Toulon', 'Perpignan', 'Autre'],
      datasets: [
        {
          data: [30, 40, 60, 70, 5],
          backgroundColor: [
            '#77CEFF',
            '#0079AF',
            '#123E6B',
            '#97B0C4',
            '#A5C8ED',
          ],
        },
      ],
    },
    testDataaa: {
      labels: [
        'workload jgf - environment 79qfcwvyc9 - status deployed - date 2022-01-02',
        'Nîmes',
        'Toulon',
        'Perpignan',
        'Autre',
      ],
      datasets: [
        {
          data: [30, 40, 60, 70, 5],
          backgroundColor: [
            '#77CEFF',
            '#0079AF',
            '#123E6B',
            '#97B0C4',
            '#A5C8ED',
          ],
        },
      ],
    },
    barData: {} as BarData,
    options: {
      indexAxis: 'y',
      // Elements options apply to all of the options unless overridden in a dataset
      // In this case, we are setting the border of each horizontal bar to be 2px wide
      elements: {
        bar: {
          borderWidth: 2,
        }
      },
      responsive: true,
      plugins: {
        legend: {
          position: 'right',
        },
        title: {
          display: true,
          text: 'Chart.js Horizontal Bar Chart'
        }
      }
    }
  })

  const { t } = useI18n({
    useScope: 'global',
  })

  state.meta.title =
    t('statistics.statistics') +
    ' - ' +
    t('statistics.latest', {
      field: 10,
    }).toLowerCase()
  state.meta.description = state.meta.title

  useHead({
    title: state.meta.title,
    meta: [
      {
        name: 'description',
        content: state.meta.description,
      },
      {
        property: 'og:title',
        content: state.meta.title,
      },
      {
        property: 'og:description',
        content: state.meta.description,
      },
    ],
  })

  axiosService
    .genericGet(
      {
        'Content-Type': 'application/json',
      },
      url.value.api.default,
      {},
    )
    .then((response: any) => {
      switch (response.status) {
        case 200:
          state.statsLatest = response.data
          const data: Array<number> = []
          const backgroundColor: Array<string> = []
          const dataset: dataset = {
            backgroundColor: [],
            data: [],
          }
          state.statsLatest.forEach((k) => {
            const label: string =
              t('deployments.workload').toLowerCase() +
              ' ' +
              k.workload +
              ' - ' +
              t('deployments.environment').toLowerCase() +
              ' ' +
              k.environment +
              ' - ' +
              t('deployments.status').toLowerCase() +
              ' ' +
              k.status +
              ' - ' +
              t('deployments.date').toLowerCase() +
              ' ' +
              moment(k.date).format('LL')
            state.barData.labels.push(label)
            data.push(k.total)
            backgroundColor.push(generateRandomColor())
          })
          dataset.data = data
          dataset.backgroundColor = backgroundColor
          state.barData.datasets.push(dataset)
          break
        case 204:
          state.alert.class = 'mute'
          state.alert.message = t('alert.http.noDeployment')
          break
        default:
          state.alert.class = 'red'
          state.alert.message = t('alert.http.errorOccured')
          break
      }
      state.responseStatus = response.status
      state.loading.loading.active = false
    })
    .catch((error: any) => {
      state.alert.class = 'red'
      state.alert.message = t('alert.http.errorOccured')
      if (error.response && error.response.status) {
        switch (error.response.status) {
          case 404:
          case 500:
            state.responseStatus = error.response.status
            break
          default:
            state.responseStatus = error.response.status
            break
        }
      } else {
        state.responseStatus = 500
      }
      state.loading.loading.active = false
      throw error
    })

  function generateRandomColor(): string {
    const letters = '0123456789ABCDEF'.split('')
    let color = '#'
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)]
    }
    return color
  }

  return {
    ...toRefs(state),
  }
}
